name: Deploy to EC2

# Trigger deployment only on push to main branch
on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Deploy to my EC2 instance
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          SOURCE: "./"
          REMOTE_HOST: ${{ secrets.HOST_DNS }}
          REMOTE_USER: ${{ secrets.USERNAME }}
          TARGET: ${{ secrets.TARGET_DIR }}

      - name: Executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60m
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status

            # Navigate to the target directory
            cd ${{ secrets.TARGET_DIR }}

            # Remove existing Node.js versions
            if sudo yum list installed nodejs &>/dev/null; then
              sudo yum remove -y nodejs npm
            fi

            # Install Node.js 18.x
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo -E bash -
            sudo yum install -y nodejs

            # Verify installation
            node -v
            npm -v
            
            # Install dependencies
            npm install

            # Install PM2 globally
            sudo npm install -g pm2

            # Stop all running PM2 processes (optional, for a clean slate)
            pm2 stop all || true

            # Start or reload the Node.js server using PM2, forcing re-execution
            pm2 startOrReload server.js --name "node-app"

            # Save the PM2 process list
            pm2 save

            # Set up PM2 to start on system startup (if not already set up)
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ${{ secrets.USERNAME }} --hp /home/${{ secrets.USERNAME }}

            # Add more debugging information
            echo "PM2 Processes:"
            pm2 list

            echo "PM2 Logs:"
            pm2 logs --lines 50

            echo "Checking if server is running..."
            for i in {1..10}; do
              if curl -s http://localhost:8000 > /dev/null; then
                echo "Server is up and running!"
                break
              else
                echo "Server not reachable, retrying in 10 seconds..."
                sleep 10
              fi
            done

            # Print final check and exit if the server is not reachable
            if ! curl -s http://localhost:8000 > /dev/null; then
              echo "Server is not reachable after multiple attempts, exiting with failure."
              exit 1
            fi
